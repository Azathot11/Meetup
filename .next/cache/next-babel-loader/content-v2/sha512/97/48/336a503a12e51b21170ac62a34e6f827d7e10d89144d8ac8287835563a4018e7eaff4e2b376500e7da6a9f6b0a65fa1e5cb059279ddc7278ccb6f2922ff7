{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Next.js\\\\next-project\\\\06-onwards-to-a-bigger-project-starting-project\\\\pages\\\\[meetupId]\\\\index.js\";\nimport React from \"react\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient } from 'mongodb';\n\nconst MeetupDetails = props => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      meetupsData: props.selectedMeetup\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://Azathot111:Azathot@cluster0.qled7.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetups => ({\n      params: {\n        meetupId: meetups._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://Azathot111:Azathot@cluster0.qled7.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: meetupId\n  });\n  client.close();\n  console.log(meetupId);\n  return {\n    props: {\n      selectedMeetup: {\n        id: selectedMeetup._id,\n        image: selectedMeetup.image,\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        description: selectedMeetup.description\n      }\n    },\n    revalidate: 1\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["D:/Next.js/next-project/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js"],"names":["React","MeetupDetail","MongoClient","MeetupDetails","props","selectedMeetup","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","params","meetupId","toString","getStaticProps","context","findOne","console","log","id","image","title","address","description","revalidate"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AACA,SAASC,WAAT,QAA4B,SAA5B;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B,sBACE;AAAA,2BACE,QAAC,YAAD;AAAc,MAAA,WAAW,EAAEA,KAAK,CAAEC;AAAlC;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAKD,CAND;;AAQA,OAAO,eAAeC,cAAf,GAA+B;AACpC,QAAMC,MAAM,GAAI,MAAML,WAAW,CAACM,OAAZ,CAAoB,iGAApB,CAAtB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAED,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB;AAEA,QAAMC,OAAO,GAAI,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA0B;AAACC,IAAAA,GAAG,EAAC;AAAL,GAA1B,EAAmCC,OAAnC,EAAvB;AAEAR,EAAAA,MAAM,CAACS,KAAP;AACA,SAAM;AACJC,IAAAA,QAAQ,EAAE,KADN;AAEJC,IAAAA,KAAK,EAACN,OAAO,CAACO,GAAR,CAAYP,OAAO,KAAI;AAC3BQ,MAAAA,MAAM,EAAC;AACLC,QAAAA,QAAQ,EAACT,OAAO,CAACE,GAAR,CAAYQ,QAAZ;AADJ;AADoB,KAAJ,CAAnB;AAFF,GAAN;AAQD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAsC;AAC3C,QAAOH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAjC;AACA,QAAMd,MAAM,GAAI,MAAML,WAAW,CAACM,OAAZ,CAAoB,iGAApB,CAAtB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAED,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB;AAEA,QAAMN,cAAc,GAAG,MAAMK,iBAAiB,CAACe,OAAlB,CAA0B;AAACX,IAAAA,GAAG,EAAEO;AAAN,GAA1B,CAA7B;AAEAd,EAAAA,MAAM,CAACS,KAAP;AAEAU,EAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AACA,SAAO;AACLjB,IAAAA,KAAK,EAAC;AACJC,MAAAA,cAAc,EAAC;AACbuB,QAAAA,EAAE,EAAGvB,cAAc,CAACS,GADP;AAEbe,QAAAA,KAAK,EAAExB,cAAc,CAACwB,KAFT;AAGbC,QAAAA,KAAK,EAAEzB,cAAc,CAACyB,KAHT;AAIbC,QAAAA,OAAO,EAAE1B,cAAc,CAAC0B,OAJX;AAKbC,QAAAA,WAAW,EAAE3B,cAAc,CAAC2B;AALf;AADX,KADD;AAULC,IAAAA,UAAU,EAAC;AAVN,GAAP;AAYD;AACD,eAAe9B,aAAf","sourcesContent":["import React from \"react\";\r\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\nimport { MongoClient } from 'mongodb'\r\n\r\nconst MeetupDetails = (props) => {\r\n  return (\r\n    <>\r\n      <MeetupDetail meetupsData={props. selectedMeetup}/>\r\n    </>\r\n  );\r\n};\r\n\r\nexport async function getStaticPaths(){\r\n  const client =  await MongoClient.connect('mongodb+srv://Azathot111:Azathot@cluster0.qled7.mongodb.net/meetups?retryWrites=true&w=majority');\r\n  const db = client.db()\r\n\r\n  const meetupsCollection= db.collection('meetups')\r\n  \r\n  const meetups =  await meetupsCollection.find({},{_id:1}).toArray()\r\n\r\n  client.close()\r\n  return{\r\n    fallback: false ,\r\n    paths:meetups.map(meetups =>({\r\n      params:{\r\n        meetupId:meetups._id.toString()\r\n      }\r\n    }))\r\n  }\r\n}\r\n\r\nexport async function getStaticProps(context){\r\n  const  meetupId = context.params.meetupId \r\n  const client =  await MongoClient.connect('mongodb+srv://Azathot111:Azathot@cluster0.qled7.mongodb.net/meetups?retryWrites=true&w=majority');\r\n  const db = client.db()\r\n\r\n  const meetupsCollection= db.collection('meetups')\r\n  \r\n  const selectedMeetup = await meetupsCollection.findOne({_id: meetupId})\r\n\r\n  client.close()\r\n\r\n  console.log(meetupId)\r\n  return {\r\n    props:{\r\n      selectedMeetup:{\r\n        id:  selectedMeetup._id,\r\n        image: selectedMeetup.image,\r\n        title: selectedMeetup.title,\r\n        address: selectedMeetup.address,\r\n        description: selectedMeetup.description\r\n      }\r\n    },\r\n    revalidate:1\r\n  }\r\n}\r\nexport default MeetupDetails;\r\n"]},"metadata":{},"sourceType":"module"}